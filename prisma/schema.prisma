// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uuid      String   @id @default(uuid())
  kakaoId   String   @unique
  createdAt DateTime @default(now())

  userCafes UserCafe[]
}

model Cafe {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  latitude  Float // GPS 위도
  longitude Float // GPS 경도
  instagram String? // 가게 인스타 계정 링크
  naverMap  String? // 가게 네이버지도 링크
  phone     String? // 가게 연락처
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userCafes UserCafe[]
  images    Image[]

  openHours OpenHours?
}

model OpenHours {
  id        Int     @id @default(autoincrement())
  monday    String?
  tuesday   String?
  wednesday String?
  thursday  String?
  friday    String?
  saturday  String?
  sunday    String?

  cafe   Cafe @relation(fields: [cafeId], references: [id])
  cafeId Int  @unique
}

enum PreferenceStatus {
  LIKE
  DISLIKE
}

model UserCafe {
  status    PreferenceStatus @default(DISLIKE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user     User   @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)
  userUuid String
  cafe     Cafe   @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  cafeId   Int

  @@id([userUuid, cafeId])
}

model Image {
  id        Int      @id @default(autoincrement())
  order     Int      @default(0)
  url       String
  name      String   @default("image name")
  createdAt DateTime @default(now())

  cafe   Cafe @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  cafeId Int
}
